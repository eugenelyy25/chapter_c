#include "bingrid.h"
#define BOARDSTR (MAX*MAX+1)

// fills unknowns in row with fill
void fill_row(board* brd, const int row, const char fill);

// same as above but with cols
void fill_col(board* brd, const int col, const char fill);

void counting(board* brd);
void counting_algo(board* brd, bool by_row, int one_sum[], int zero_sum[]);
void pairs_algo(board* brd, const int row, const int col);
void oxo_algo(board* brd, const int row, const int col);
bool sqr_check(int str_len);
char oppsite(char one_zero);

// checks if indices in question are in bounds and if they are unknown
bool unk_bounds_check(board* brd, int row, int col, int row_shift, int col_shift);

bool str2board(board* brd, char* str){
    int str_len = strlen(str);
    brd -> sz = sqrt(str_len);

    if (str_len == 0){
        return false;
    }

    int index = 0;
    for (int j = 0; j < brd -> sz; j++){
        for (int k = 0; k < brd -> sz; k++){
            brd->b2d[j][k] = str[index];
            index++;
        
        }
    }
    return true;
}

bool sqr_check(int str_len){
    int i += 2;
    bool square = false;
    while (i <= MAX && square == false){
        if ((str_len / i) == i){
            square = true;
        }
        i+=2;
    }
    return square;
}

void board2str(char* str, board* brd)
{
    if (brd -> sz == 0){
        str[0] = '\0';
        return;
    }

    int index = 0;
    for (int i = 0; i < brd -> sz; i++){
        for (int j = 0; j < brd -> sz; j++){
            str[index] = brd->b2d[i][j];
            index++;
        }
    }
    str[index] = '\0';
}

bool solve_board(board* brd)
{
    char str[BOARDSTR];
    char temp_str[BOARDSTR];

    do {
        board2str(temp_str, brd);
        for (int row = 0; row < brd -> sz; row++){
            for (int col = 0; col < brd -> sz; col++){
                pairs_algo(brd, row, col);
                oxo_algo(brd, row, col);
            }
        }
        counting(brd);
        board2str(str, brd);
    }
    while (strcmp(str, temp_str));
    
    int i = 0;
    while(str[i]){
        if (str[i] == UNK){
            return false;
        }
        i++;
    }
    return true;
}

void counting(board* brd)
{
    int one_sum_rows[MAX];
    int zero_sum_rows[MAX];
    int one_sum_cols[MAX];
    int zero_sum_cols[MAX];

    counting_algo(brd, true, one_sum_rows, zero_sum_rows);
    for (int i=0; i<brd -> sz; i++){
        if (one_sum_rows[i] == (brd -> sz / 2)){
            fill_row(brd, i, ZERO)
        }
        else if (zero_sum_rows[i] == (brd -> sz / 2)){
        fill_row(brd, i, ONE);
        }
    }
    counting_algo(brd, false, one_sum_cols, zero_sum_cols);
    for (int i=0; i<brd -> sz; i++){
        if(one_sum_cols[i] == (brd -> sz/2)){
            fill_col(brd, i, ZERO);
        }
        else if (zero_sum_cols[i] == (brd -> sz/2)){
            fill_col(brd, i, ONE);
        }
    }
}

void counting_algo(board* brd, bool by_row, int one_sum[], int zero_sum[])
{
    int i, j;
    for (i=0; i<brd -> sz; i++){
        int one_cnt = 0;
        int zero_cnt = 0;
        for (j=0; j<brd -> sz; j++){
            if (by_row){
                if (brd->b2d[i][j] == ONE){
                    one_cnt++;
                }
                else if (brd-b2d[i][j] == ZERO){
                    zero_cnt++;
                }
            }
            else {
                if (brd->b2d[j][i] == ONE){
                    one_cnt++;
                }
                else if (brd->b2d[j][i] == ZERO){
                    zero_cnt++;
                }
            }
        }
    }
}